#!/bin/bash -x

PGPASSWORD=<%= node[:metroextractor][:postgres][:password] %>
OSMOPTS="--host localhost --database <%= node[:metroextractor][:postgres][:db] %> --username <%= node[:metroextractor][:postgres][:user] %>"
PGSQLOPTS="-h localhost -d <%= node[:metroextractor][:postgres][:db] %> -U <%= node[:metroextractor][:postgres][:user] %>"
PGSQL2SHPOPTS="-h localhost -u <%= node[:metroextractor][:postgres][:user] %> -P <%= node[:metroextractor][:postgres][:password] %> <%= node[:metroextractor][:postgres][:db] %>"
export PGPASSWORD OSMOPTS PGSQLOPTS PGSQL2SHPOPTS

function osm2pgsql_shapefiles
{
  slug=$1
  prefix=${slug//-/_}_osm

  # generate shp files
  #
  osm2pgsql -sluc -C 1024 ${OSMOPTS} -S <%= node[:metroextractor][:setup][:scriptsdir] %>/osm2pgsql.style -p ${prefix} ex/$slug.osm.bz2

  pgsql2shp -rk -f shp/${slug}.osm-point.shp    ${PGSQL2SHPOPTS} ${prefix}_point  
  pgsql2shp -rk -f shp/${slug}.osm-polygon.shp  ${PGSQL2SHPOPTS} ${prefix}_polygon
  pgsql2shp -rk -f shp/${slug}.osm-line.shp     ${PGSQL2SHPOPTS} ${prefix}_line   

  # generate geojson from shp files
  #
  ogr2ogr -f GeoJSON -t_srs crs:84 shp/${slug}.osm-line.geojson shp/${slug}.osm-line.shp      
  ogr2ogr -f GeoJSON -t_srs crs:84 shp/${slug}.osm-point.geojson shp/${slug}.osm-point.shp    
  ogr2ogr -f GeoJSON -t_srs crs:84 shp/${slug}.osm-polygon.geojson shp/${slug}.osm-polygon.shp

  # merge the line/point/polygon geojson output
  #
  <%= node[:metroextractor][:setup][:scriptsdir] %>/merge-geojson.py shp/${slug}.osm-line.geojson shp/${slug}.osm-point.geojson shp/${slug}.osm-polygon.geojson -o shp/${slug}.osm.geojson

  # zip up our output
  #
  zip -j shp/${slug}.osm2pgsql-shapefiles.zip shp/${slug}.osm-*.shp shp/${slug}.osm-*.prj shp/${slug}.osm-*.dbf shp/${slug}.osm-*.shx
  zip -j shp/${slug}.osm2pgsql-geojson.zip shp/${slug}.osm.geojson

  # remove source files
  #
  rm shp/${slug}.osm-*.*
  rm shp/${slug}.osm-*.geojson
  rm shp/${slug}.osm.geojson

  # clean up the db
  #
  echo "DROP TABLE ${prefix}_line"    | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_nodes"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_point"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_polygon" | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_rels"    | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_roads"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_ways"    | psql ${PGSQLOPTS}
}

function imposm_shapefiles
{
  slug=$1
  prefix=${slug//-/_}

  mkdir shp/$slug-imposm

  # "--connect" is an undocumented option for imposm; Olive Tonnhofer assures me it won't disappear in the future.
  imposm --read --cache-dir shp/${slug}-imposm --write --table-prefix=${prefix}_ --connect postgis://osm:password@localhost/osm ex/${slug}.osm.pbf

  declare -a arr=('admin' 'aeroways' 'amenities' 'buildings' 'landusages' 'landusages_gen0' 'landusages_gen1' 'mainroads' 'landusages_gen1' 'mainroads_gen1' 'minorroads' 'motorways' 'motorways_gen0' 'motorways_gen1' 'places' 'railways' 'railways_gen0' 'railways_gen1' 'roads' 'roads_gen0' 'roads_gen1' 'transport_areas' 'transport_points' 'waterareas' 'waterareas_gen0' 'waterareas_gen1' 'waterways')

  for i in ${arr[@]}; do
    pgsql2shp -rk -f shp/${slug}-imposm/${slug}.osm-${i}.shp ${PGSQL2SHPOPTS} ${prefix}_${i}
    ogr2ogr -f GeoJSON -t_srs crs:84 shp/${slug}-imposm/${slug}-${i}.geojson shp/${slug}-imposm/${slug}.osm-${i}.shp
  done

  zip -j shp/${slug}.imposm-shapefiles.zip shp/${slug}-imposm/${slug}.osm-*.shp shp/${slug}-imposm/${slug}.osm-*.prj shp/${slug}-imposm/${slug}.osm-*.dbf shp/${slug}-imposm/${slug}.osm-*.shx
  zip -j shp/${slug}.imposm-geojson.zip shp/${slug}-imposm/${slug}-*.geojson

  rm -r shp/${slug}-imposm

  for i in ${arr[@]}; do
    echo "DROP TABLE ${prefix}_${i}" | psql ${PGSQLOPTS}
  done
}

<% require 'json' %>
<% json = File.read("#{node[:metroextractor][:setup][:scriptsdir]}/cities.json") %>
<% data = JSON.parse(json) %>
<% data['regions'].each do |region, val| %>
  <% val['cities'].keys.each do |city| %>
osm2pgsql_shapefiles <%= city %> &
imposm_shapefiles <%= city %> &
wait
  <% end %>
<% end %>
